// Code generated by MockGen. DO NOT EDIT.
// Source: ./init.go

// Package auth is a generated GoMock package.
package auth

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	oauth2 "golang.org/x/oauth2"
)

// MockIOAuth is a mock of IOAuth interface.
type MockIOAuth struct {
	ctrl     *gomock.Controller
	recorder *MockIOAuthMockRecorder
}

// MockIOAuthMockRecorder is the mock recorder for MockIOAuth.
type MockIOAuthMockRecorder struct {
	mock *MockIOAuth
}

// NewMockIOAuth creates a new mock instance.
func NewMockIOAuth(ctrl *gomock.Controller) *MockIOAuth {
	mock := &MockIOAuth{ctrl: ctrl}
	mock.recorder = &MockIOAuthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIOAuth) EXPECT() *MockIOAuthMockRecorder {
	return m.recorder
}

// AuthCodeURL mocks base method.
func (m *MockIOAuth) AuthCodeURL(state string, opts ...oauth2.AuthCodeOption) string {
	m.ctrl.T.Helper()
	varargs := []interface{}{state}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AuthCodeURL", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// AuthCodeURL indicates an expected call of AuthCodeURL.
func (mr *MockIOAuthMockRecorder) AuthCodeURL(state interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{state}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthCodeURL", reflect.TypeOf((*MockIOAuth)(nil).AuthCodeURL), varargs...)
}

// Client mocks base method.
func (m *MockIOAuth) Client(ctx context.Context, t *oauth2.Token) *http.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Client", ctx, t)
	ret0, _ := ret[0].(*http.Client)
	return ret0
}

// Client indicates an expected call of Client.
func (mr *MockIOAuthMockRecorder) Client(ctx, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Client", reflect.TypeOf((*MockIOAuth)(nil).Client), ctx, t)
}

// Exchange mocks base method.
func (m *MockIOAuth) Exchange(ctx context.Context, code string, opts ...oauth2.AuthCodeOption) (*oauth2.Token, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, code}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exchange", varargs...)
	ret0, _ := ret[0].(*oauth2.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exchange indicates an expected call of Exchange.
func (mr *MockIOAuthMockRecorder) Exchange(ctx, code interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, code}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exchange", reflect.TypeOf((*MockIOAuth)(nil).Exchange), varargs...)
}
